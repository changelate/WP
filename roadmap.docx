Итого:
1.	Пробежаться по оставшимся темам, почитать статьи, посмотреть видосы
Шорткоды
Таксономии
Woocomerce
Wp_query
ContactForm
+Скачанный курс
2.	Собрать свой сайт-киноархив, применив большинство элементов
3.	Создать на Elementor пару страниц
4.	Создать еще пару страниц с примеров верстки с активными элементами

Задание по кино-сайту
•	Создать кастомный тип записей – фильмы
•	Создать кастомный тип записей – актеры
•	Создать архив фильмов
•	Создать поиск
•	Создать сайдбар
•	Создать блог с записями о фильмах
•	Создать архив актеров
•	Создать таксономии жанров
•	Создать дочернюю тему
•	Сделать пагинацию
•	Сделать страницу с фильтрацией
•	Создать навигационное меню
•	

Что по кино-сайту
•	Не забыть, что есть поэтапное задание от гпт
•	Сделать отображение фильмов через собственные страницы и CPT
•	Изменить стили на красивые
•	Надо переписать на чистые свои файлы – конфликты стилей
•	Реализовать архив	

Подумать
•	Как задать ограниченный размер картинки – фильма
•	Как вывести на отдельной странице CPT-фильма контент и фото красиво
•	Измен

Конспект:
•	Страницы/Записи/Плагины/Виджеты/Блоки
•	Дочерние темы
•	Get_template_parts
•	Хуки, подключение скриптов хуками
•	Wp_eneque_script
•	register_nav_menu
•	wp_nav_menu
•	Подключение в functions.php
•	Body_class
•	$classes
•	add_filter
•	is_front_page
•	is_singular
•	the_title()
•	Плагин ACF
•	Динамические элементы:
Карусель / Слайдер (баннеры, отзывы, партнёры)
ACF/Gutenberg

Повторяющиеся блоки (преимущества, этапы, команда)
ACF Repeater
цикл while (have_rows('advantages'))

Фильтруемый каталог / портфолио
кастомный тип записи (project) + ACF для деталей
WP_Query с фильтрацией по таксономиям (категории)

Отзывы с рейтингом
ACF Repeater или отдельный CPT review
звёздочки через CSS или SVG

Аккордеон / FAQ
Решение: ACF Repeater (вопрос + ответ)
Или Gutenberg-блок «Детали» (встроен в WP 6.5+)

•	the_post() в header
•	the_content() в header
•	Вставка изображений через админку и код на странице в админке
•	Визуальный редактор страниц в связке с текстовым (кодовым)
•	Custom post types
•	Способы динамических элементов:
ACF + Repeater + Swiper.js
Gutenberg-блок
Плагин-слайдер (MetaSlider, Smart Slider 3)
•	Есть создание динамических страниц через редактор кода внутри админки
•	CarbonFields
•	Gutenberg 
•	Lazy Blocks 
•	Виджеты
•	Шаблоны – это обычные php-файлы
•	Спросить у гпт, записать и запомнить основные сущности WP
•	Произвольные поля
•	Get_post_meta()
•	The_content()
•	Boostrap + Gutenberg – есть возможность поддержки стилей bootstrap
•	Работа с постами:
Get_post_title()
The_excerpt()
The_time()
The_author()

•	Шорт-коды
•	Цикл и get_posts - разница
•	Посмотреть видео, как делают какой нить блог - нужно посмотреть как обычно делают вывод всего это контента, как выводят динамический контент
•	Когда применяются произвольные поля
•	Карточки можно создавать с помощью произвольных полей на странице и get_posts
•	Для каждой страницы можно создать шаблон .php, потом создать страницу в админке и назначить ей этот шаблон, нужно только комментариями добавить Template name
•	К кастомным записям можно добавлять шаблон, который будет отображаться если перейти по этой кастомной записи - не автоматически, нужно назначить
•	Carbon fields
•	Сode_snippets
•	Что такое wp_query
•	Можно создавать single-post_type.php чтобы шаблоны к кастомным записям применялись автоматически
•	Сайдбар подключается тоже с помощью отдельного файла, но сначала его нужно подключить в functions.php -register_sudebar - функция get_sidebar(в верстке) dynamic_sidebar.. (в шаблоне сайдбара). В админке он добавляется, как виджет
•	Есть шорткоды - куски небольшой логики. Есть уже готовые, как галерея, аудиоплеер и т.д.
•	Добавить почитать про iframe, fancybox, модальные окна
•	Придется верстать, подумать, как быстро делать красивые дизайны, погуглить подобные нейронки
•	В elementor визуал настраивается в панелях блоков
•	В elementor кроме стандартных блоков есть элементы, которые можно загрузить – значок папки, например, заголовок с текстом и кнопкой
•	Как назначить функционал кнопки ?
•	В elementor есть встроенные иконки, можно дублировать элементы
•	





Что изучить:
- https://www.youtube.com/watch?v=KcS4rxGyf28 – посадка на WP
- https://www.youtube.com/watch?v=CGz7-22mX4M&list=PL3LQJkGQtzc66eiaqOVgIVQ5mw4_6KqDd – хороший курс
-https://www.youtube.com/watch?v=u_3BfxwkjWw – на случай быстро вспомнить, как переносить
- https://www.youtube.com/watch?v=5sc5BEdHOVQ&list=PLkOvrhXD_9Pu0kUx9X2G-Miyqnmkq7C6a&index=23 – Elementor очень подробно (создание сайта на Elementor)


Сделать в ближайшее время:
-Кастомные типы записей
-Вывод записей
-Применение к записям single и content.php

-Создание карусели фото
-Создание меню-аккордиона – можно на жанры
-Создание навигационного меню
-Создание формы поиска
-Поиспользовать кастомные поля Gutenberg 
-шорткоды 


-ACF
-Elementor
-Contact form



План
•	Иерархия файлов: Создайте пустую тему: файлы style.css (с шапкой темы), index.php, functions.php. Подключите wp_head() в шапке (header.php) и wp_footer() в футере (footer.php).

•	Подключение стилей/скриптов: Зарегистрируйте и подключите CSS/JS через wp_enqueue_style() и wp_enqueue_script() в functions.php. Убедитесь, что скрипты грузятся с правильными зависимостями.

•	Меню и навигация: Зарегистрируйте навигационное меню с помощью register_nav_menu() или register_nav_menus(), выведите его функцией wp_nav_menu() в нужном месте темы (обычно в header.php).

•	Форма поиска: Добавьте поддержку поиска: выведите форму (например, <?php get_search_form(); ?>) и создайте шаблон search.php, который обрабатывает результаты поиска.
•	Безопасный вывод и перевод: Всегда экранируйте вывод: используйте esc_html(), esc_attr() и подобные функции при выводе пользовательских данных. Подготовьте тему к переводу: оборачивайте текстовые строки в __() или _e().

•	Шаблоны страниц: Создайте кастомный шаблон страницы (например, template-about.php) и подключите его через комментарий Template Name. Также создайте single.php и page.php (можно сначала копировать index.php).

•	Цикл WordPress (The Loop): В index.php или home.php выведите список последних постов в цикле if ( have_posts() ) : while ( have_posts() ) : the_post(); ... endwhile; endif;.

•	Вывод постов в блоге

•	Кастомные типы записей: Зарегистрируйте свой CPT, например Book (register_post_type('book', [...])). Добавьте поддержку заголовка, редактора, миниатюры. Убедитесь, что при активации темы появляется раздел «Книги» в админке.

•	Блоки Gutenberg: Начните с простейшего: создайте плагин, регистрирующий собственный блок через register_block_type(), описав его в block.json. Например, блок «Счетчик»: в настройках блока есть атрибут count (число), в редакторе выбираете начальное значение, а на странице выводится «Счетчик: X». В block.json определите метаданные и атрибуты блока[9], подключите скрипт для редактора и фронтенда.


•	ACF + Custom Fields
установка ACF, создание полей (text, image, repeater), вывод полей в шаблоне get_field() / the_field()

Мини-задания:

Создать Repeater для блока "Преимущества" и вывести его.
Сделать поле «CTA кнопка» в Options (шапка/подвал).
Настроить поле изображения и вывести wp_get_attachment_image().

Большое задание: добавить в лендинг ACF-набор, чтобы клиент мог полностью редактировать содержимое секций без правки кода.
•	ContactForm 
валидация, отправка, защита от спама (reCAPTCHA)
Мини-задания:
Добавить форму обратной связи и сохранить отправки (Flamingo или WPForms).
Сделать AJAX-отправку формы без перезагрузки (admin-ajax.php).
Подключить Google reCAPTCHA.
Большое задание: форма заказа с полями, валидацией, письмом админу и уведомлением пользователю.
•	pre_get_posts, add_filter

•	Дочерняя тема: Создайте дочернюю тему от стандартной (например, Twenty Twenty-Three). Переопределите один шаблон (например, header.php или стили) и убедитесь, что дочерняя тема наследует функционал родителя.
child theme, шаблоны single.php, archive.php, регистрация меню и виджетов, экранирование (esc_html, esc_attr).
Мини-задания:
Создать дочернюю тему и переопределить стили.
Добавить новое меню и вывести wp_nav_menu().
Сделать кастомный виджет (WP_Widget).
Большое задание: взять бесплатную тему и внести 5 правок по ТЗ (смена шапки, добавить блок отзывов, изменить footer).

•	Поделать карусель фото/видео
Карусель / Слайдер (баннеры, отзывы, партнёры)
ACF/Gutenberg

•	Поделать повторяющиеся блоки (преимущества, этапы, команда)
ACF Repeater
цикл while (have_rows('advantages'))

•	Поделать фильтруемый каталог / портфолио
кастомный тип записи (project) + ACF для деталей
WP_Query с фильтрацией по таксономиям (категории)

•	Поделать отзывы с рейтингом
ACF Repeater или отдельный CPT review
звёздочки через CSS или SVG

•	Аккордеон / FAQ
Решение: ACF Repeater (вопрос + ответ)
Или Gutenberg-блок «Детали» (встроен в WP 6.5+)

•	CarbonFields

•	Конвертация в тему: Выберите готовый HTML-шаблон сайта (статический) и переделайте его в тему WordPress. Разбейте HTML на части: header.php, footer.php, sidebar.php, и т.д. Перенесите стили/скрипты в functions.php, используя wp_enqueue_ функции.

•	Шаблоны: определите, какие HTML-страницы соответствуют шаблонам WordPress (например, главная страница → front-page.php, страница контактов → page-contacts.php). Подключите динамическое содержимое: замените статические тексты функциями the_title(), the_content().

•	Меню и виджеты: Если шаблон имел меню или блоги, привяжите эти места к WP-навигации и сайдбару. Проверьте, что в админке можно менять контент без правки кода.

•	Изучить оставленные материалы

•	Короткие коды и конструкторы: Создайте простой шорткод (например, [my_gallery]), который выводит галерею изображений. При наличии, добавьте кастомный блок Gutenberg: через register_block_type() оформите блок с собственным содержимым.
Что изучить: структура плагина, регистрация CPT, options page, hooks & nonce, безопасность.
Мини-задания:
Плагин-шорткод: вывод текущей погоды (пример с API).
Зарегистрировать CPT «Portfolio» и метаполя вручную.
Создать options page для настроек темы.
Большое задание: плагин «Отзывы» с админской частью, фронтэндом и шорткодом.
•	Таксономии: Зарегистрируйте кастомную таксономию, например, genre для типа book (register_taxonomy()). Выведите список книг по жанрам. Создайте шаблон taxonomy-genre.php для вывода архива по жанру.

•	Перенести свою верстку
•	Большое задание:
Проект: "Лендинг → Тема WP"
Требования: сверстать лендинг, разбить на шаблоны, сделать редактируемые блоки (через стандартный editor + ACF для повторяющихся секций), реализовать форму обратной связи (Contact Form 7) и обработку (письмо + редирект).
•	


	
•	DOM
DOM, события, fetch/AJAX, промисы, jQuery (по необходимости).
Мини-задания:
Сделать AJAX-поиск постов (admin-ajax.php).
Реализовать подгрузку постов «Load more» (WP_Query + AJAX).
Реализовать модальное окно и слайдер (без плагина).
Большое задание: динамическая фильтрация каталога (по цене/категории) без перезагрузки.

•	JQuery

•	AJAX: Реализуйте AJAX: добавьте скрипт, который при нажатии кнопки отправляет AJAX-запрос на сервер (через admin-ajax.php) и получает ответ. Например, загрузите дополнительный пост без перезагрузки.

•	 WP_Query: Напишите отдельный WP_Query: например, выведите 5 последних постов определённой категории в шаблоне или отдельном блоке.
•	Шаблоны для CPT: Создайте single-book.php и archive-book.php для отображения постов и списка книг.
•	Сайдбар и виджет: Зарегистрируйте сайдбар в functions.php (register_sidebar()) и выведите его в теме (dynamic_sidebar()). Создайте свой виджет: создайте класс, наследующий WP_Widget, опишите поля и вывод (например, выводит простое сообщение или текущее время). Зарегистрируйте виджет через widgets_init.
•	Пагинация: Для архива постов реализуйте постраничную навигацию. Используйте встроенные функции the_posts_pagination() или paginate_links(). Настройте читабельные ЧПУ через опции ссылки.
•	Медиа-размеры: Поддержите миниатюры: add_theme_support('post-thumbnails') и зарегистрируйте пользовательский размер изображения через add_image_size('custom-thumb', 300, 200). Проверьте, что при добавлении миниатюры генерируется нужный размер.
•	Произвольные поля и метабоксы: Добавьте метабоксы в админке: используйте add_meta_box() в хуке add_meta_boxes, сохраните данные через save_post. Например, добавьте поле «Рейтинг книги» для CPT book.
•	Плагины и опции: Подключите плагин ACF (или аналог) для удобной работы с метаполями. Добавьте в тему страницу настроек (add_menu_page) с опциями (register_setting) – например, настройка цвета фона для сайта.
•	Атрибуты и рендеринг: Определите несколько атрибутов (string, boolean, number) в block.json[9] и передайте их React-компоненту блока в edit. Проверьте, что изменения атрибутов сохраняются. Если хотите усложнить, сделайте динамический блок: в PHP-файле плагина укажите render_callback, чтобы генерировать содержимое на сервере (например, текущую дату или случайное число).
•	Стили и скрипты: Добавьте стили для блока: один CSS-файл для редактора (editorStyle) и один для фронтенда (style). Например, задайте отличное оформление в редакторе и на сайте.
•	Использование REST API: Если нужно, попробуйте подключить блок к REST API. К примеру, сделайте блок, который по нажатию кнопки получает некоторые данные через REST-запрос (используйте wp.apiFetch() в JavaScript) и отображает их.

Групповое задание: Разработайте полноценную тему WP с нуля. Тема должна включать: шапку и подвал с правильными хук-функциями, меню, вывод постов в цикле на главной (с пагинацией), шаблоны страницы и отдельного поста. Добавьте один Custom Post Type с таксономией (например, «Проекты» и «Категории проектов»), оформите для него отдельные страницы (архив и single). Зарегистрируйте сайдбар с виджетом (выведите информацию, например, о сайте). Убедитесь, что все формы поиска и фильтры работают. Сделайте тему готовой к локализации (используйте load_theme_textdomain). Используйте функции экранирования при выводе любой динамической информации.
Групповое задание: Разработайте плагин с кастомным блоком для редактора Gutenberg. Блок может, например, выводить список последних постов с какими-то фильтрами или графический элемент. Определите его через block.json с атрибутами (например, заголовок блока, количество постов)[9]. В PHP-файле плагина зарегистрируйте блок и реализуйте рендеринг, если нужно. Задание: чтобы блок был и интерактивным в редакторе, и корректно отображался на сайте после публикации.

WooCommerce и e-коммерция
•	Установка и базовая настройка: Установите плагин WooCommerce. Создайте несколько товаров, категорий товаров, настройте страницы магазина и корзины. Разберитесь, как заполнить данные товара (цена, артикул, галерея).
•	Шаблоны Woo: Создайте дочернюю тему для WooCommerce или подключите функции: в functions.php темы подключите поддержку WooCommerce (add_theme_support('woocommerce')). Переопределите шаблон вывода товара или страницы магазина (скопируйте файл из /woocommerce/templates/ в папку темы woocommerce/ и измените).
•	Расширение функций: Напишите простой фрагмент кода (плагин или в functions.php), который добавляет произвольное поле (meta) к товарам (например, «Артикул2») и отображает его на странице товара. Используйте хук WooCommerce (woocommerce_product_options_general_product_data и save_post или функции-поддержки WooCommerce).
•	Платежи и доставка: Ознакомьтесь с настройками способов оплаты и доставки. Практическое задание: измените приветствие в email-уведомлении клиенту при новом заказе (через переопределение шаблона писем или хук).
Практика: Соберите простой интернет-магазин: установите несколько плагинов (WooCommerce, платёжный шлюз тестовый), оформите витрину товаров с опцией «Добавить в корзину». Добавьте один кастомный функционал: например, модуль «Сопутствующие товары» или «Перекрёстные продажи». Убедитесь, что процесс оформления заказа работает «на бутафории» (теща-сервер или sandbox-платежи).

Оптимизация, безопасность и SEO
•	Оптимизация: Проверьте скорость сайта (используйте Lighthouse или GTmetrix). Настройте кеширование: установите плагин (например, W3 Total Cache или WP Super Cache) и включите page cache, minify CSS/JS, CDN (если есть). Оптимизируйте изображения (скачайте плагин «оптимизация изображений»).
•	Безопасность: Обновите WordPress, темы и плагины до последних версий. Отключите возможность редактирования файлов темы/плагинов в админке (define('DISALLOW_FILE_EDIT', true) в wp-config.php). Убедитесь, что пароли сильные. Используйте функции валидации и экранирования ввода: все данные из форм проверяйте (sanitize), а вывод — экранируйте (escaping)[10]. Установите SSL-сертификат и убедитесь, что сайт доступен по HTTPS.
•	SEO: Настройте структуру URL (человеко-понятные постоянные ссылки). Добавьте метатеги (Title, Description) – можно с плагином Yoast или вручную в <head>. Создайте файл sitemap.xml (плагин или ручками) и файл robots.txt. Проверьте, что на сайте корректный <h1> и семантическая разметка. Рассмотрите микроразметку Schema.org для контактной информации и других элементов.
Практика: Проанализируйте свой разработанный сайт (лучше на реальном хостинге). Выполните чек-лист: скорость (видео 80+ баллов по Google PageSpeed), безопасность (сканер типа WPScan ничего не выдает), SEO (страница проиндексирована, сниппеты отображаются правильно). Запишите, какие улучшения вы внесли (настройки плагинов, правки кода) – это укрепит навыки оптимизации и подготовки готового продукта.
Источники: практические примеры и требования основаны на официальной документации WordPress и образовательных ресурсах (см. примеры задач[1][2][6][7][9]).
